[gd_scene load_steps=10 format=3 uid="uid://u1iv0d1s1vgg"]

[ext_resource type="Script" path="res://screens.gd" id="1_5nfhd"]
[ext_resource type="Theme" uid="uid://pv22nvpitdjd" path="res://theme.tres" id="1_eey4u"]
[ext_resource type="PackedScene" uid="uid://dbcrt8iur1ae4" path="res://main.tscn" id="1_wvmgd"]
[ext_resource type="Script" path="res://src/camera/CustomCamera2D.gd" id="2_xh58l"]

[sub_resource type="Shader" id="Shader_82407"]
code = "shader_type canvas_item;

uniform float dither : hint_range(0.0, 1.0) = 0.5;
uniform float bits : hint_range(1.0, 8.0, 1.0) = 6.0;
uniform bool limit_palette = true;

uniform float tilt : hint_range(-1.0, 1.0) = 0.0;
uniform vec2 cam_offset = vec2(0,0);

void vertex() {
	VERTEX += cam_offset;
}

void fragment() {
	float angle = (tilt + 0.5) * PI;
	mat2 rotation = mat2(vec2(sin(angle), -cos(angle)), vec2(cos(angle), sin(angle)));
	vec2 uv = UV;
	uv -= vec2(0.5);
	uv *= rotation;
	uv += vec2(0.5);
	
    vec4 screen_color = texture(TEXTURE, uv);
    
    float a = floor(mod(uv.x / TEXTURE_PIXEL_SIZE.x, 2.0));
    float b = floor(mod(uv.y / TEXTURE_PIXEL_SIZE.y, 2.0)); 
    float c = mod(a + b, 2.0);
	
	if (limit_palette) {
	    vec4 reduced = vec4(vec3(0.0), 1.0);
	    
		float nb_colors = pow(2.0, bits);
		
	    reduced.r = (round(screen_color.r * nb_colors + dither) / nb_colors) * c;
	    reduced.g = (round(screen_color.g * nb_colors + dither) / nb_colors) * c;
	    reduced.b = (round(screen_color.b * nb_colors + dither) / nb_colors) * c;
	    c = 1.0 - c;
	    reduced.r += (round(screen_color.r * nb_colors - dither) / nb_colors) * c;
	    reduced.g += (round(screen_color.g * nb_colors - dither) / nb_colors) * c;
	    reduced.b += (round(screen_color.b * nb_colors - dither) / nb_colors) * c;
		
		COLOR = reduced;
	} else {
		COLOR = screen_color;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_cy1x1"]
shader = SubResource("Shader_82407")
shader_parameter/dither = 0.5
shader_parameter/bits = 6.0
shader_parameter/limit_palette = false
shader_parameter/tilt = 0.0
shader_parameter/cam_offset = Vector2(0, 0)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1byre"]
noise_type = 3
frequency = 0.15

[sub_resource type="Shader" id="Shader_f54mf"]
code = "shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE :hint_screen_texture, filter_linear_mipmap;
uniform float quality :hint_range(1, 16, 1) = 8;
uniform vec2 size = vec2(0.0);

void fragment() {
	vec2 direction = size * SCREEN_PIXEL_SIZE * 8.0;
	vec4 output = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	for (float i = 1.0 / quality; i <= 1.0; i += 1.0 / quality) {
		output += texture(SCREEN_TEXTURE, SCREEN_UV + direction * i);
	}

	output /= quality + 1.0;
	
	COLOR = output;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0c5rj"]
shader = SubResource("Shader_f54mf")
shader_parameter/quality = 8.0
shader_parameter/size = Vector2(0, 0)

[node name="Screens" type="Control"]
process_mode = 3
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_5nfhd")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
texture_filter = 1
material = SubResource("ShaderMaterial_cy1x1")
layout_mode = 1
offset_left = -6.0
offset_top = -6.0
offset_right = 316.0
offset_bottom = 176.0
scale = Vector2(6, 6)
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
disable_3d = true
handle_input_locally = false
use_taa = true
canvas_item_default_texture_filter = 0
size = Vector2i(322, 182)
render_target_update_mode = 4

[node name="Main" parent="SubViewportContainer/SubViewport" node_paths=PackedStringArray("camera") instance=ExtResource("1_wvmgd")]
camera = NodePath("../Camera2D")
hit_stress = 0.1

[node name="Camera2D" type="Camera2D" parent="SubViewportContainer/SubViewport" node_paths=PackedStringArray("container", "game", "blur")]
process_mode = 1
script = ExtResource("2_xh58l")
container = NodePath("../..")
game = NodePath("../Main")
max_angle = 0.5
max_offset = 24.0
noise = SubResource("FastNoiseLite_1byre")
blur = NodePath("../../../Blur")

[node name="Blur" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_0c5rj")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Menu" type="Control" parent="."]
unique_name_in_owner = true
visible = false
layout_mode = 2
anchors_preset = 0
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
pivot_offset = Vector2(5, 0)
theme = ExtResource("1_eey4u")

[node name="PanelContainer" type="PanelContainer" parent="Menu"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="Menu/PanelContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 72
text = "PAUSE"
horizontal_alignment = 1
